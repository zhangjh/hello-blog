<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>但丁笔记</title>
    <link>http://zhangjh.me/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个伪文青，一个low geek 孤单的坚持码字</description>
    <pubDate>Fri, 19 Oct 2018 18:30:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>分享我收藏的小而美JS库[三] -- Vivid.js</title>
      <link>http://zhangjh.me/2018/07/01/js-lib-share3/</link>
      <guid>http://zhangjh.me/2018/07/01/js-lib-share3/</guid>
      <pubDate>Sun, 01 Jul 2018 11:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;i class=&quot;iconfont&quot; style=&quot;color: #1296db&quot;&gt;&amp;#xe65d;&lt;/i&gt;  18/53，每周一篇博，坚持！&lt;/p&gt;
&lt;p&gt;今天七月一号了，不知不觉2018年又已经过去了一半了，工作后压力大感觉时间都过的快了些。想来也是，上了年纪了，现在的一年占你所剩人生的比例越来越重了，不由得让人对时间的流逝关注起来。大家都加油，与诸君共勉。&lt;/p&gt;
&lt;p&gt;这一篇博文是小而美的库分享第三篇，准备分享一个SVG图标的库，名字叫做&lt;a href=&quot;https://webkul.github.io/vivid/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vivid.js&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;关于Vivid-js&quot;&gt;&lt;a href=&quot;#关于Vivid-js&quot; class=&quot;headerlink&quot; title=&quot;关于Vivid.js&quot;&gt;&lt;/a&gt;关于Vivid.js&lt;/h4&gt;&lt;p&gt;现如今，我们在web开发过程中，需要用到图标的时候已经很少直接插入一张图片了，更多的时候使用的都是SVG、iconfont形式的图标了。这种图标的好处就是可以自定义大小、颜色等样式。&lt;br&gt;这其中，国内有阿里开源的&lt;a href=&quot;http://iconfont.cn/home/index&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里巴巴矢量图标库&lt;/a&gt;，也有&lt;a href=&quot;https://v3.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bootstrap&lt;/a&gt;之类好用的图标库。&lt;br&gt;Vivid.js也是一款优秀的矢量图标库，可以作为备选之一。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><i class="iconfont" style="color: #1296db">&#xe65d;</i>  18/53，每周一篇博，坚持！</p><p>今天七月一号了，不知不觉2018年又已经过去了一半了，工作后压力大感觉时间都过的快了些。想来也是，上了年纪了，现在的一年占你所剩人生的比例越来越重了，不由得让人对时间的流逝关注起来。大家都加油，与诸君共勉。</p><p>这一篇博文是小而美的库分享第三篇，准备分享一个SVG图标的库，名字叫做<a href="https://webkul.github.io/vivid/" target="_blank" rel="noopener">Vivid.js</a>。</p><h4 id="关于Vivid-js"><a href="#关于Vivid-js" class="headerlink" title="关于Vivid.js"></a>关于Vivid.js</h4><p>现如今，我们在web开发过程中，需要用到图标的时候已经很少直接插入一张图片了，更多的时候使用的都是SVG、iconfont形式的图标了。这种图标的好处就是可以自定义大小、颜色等样式。<br>这其中，国内有阿里开源的<a href="http://iconfont.cn/home/index" target="_blank" rel="noopener">阿里巴巴矢量图标库</a>，也有<a href="https://v3.bootcss.com/" target="_blank" rel="noopener">bootstrap</a>之类好用的图标库。<br>Vivid.js也是一款优秀的矢量图标库，可以作为备选之一。</p><a id="more"></a><p>它有近百个自带的图标，自定义样式方式也非常方便，可以直接在元素上定义属性，使用起来也是相当轻量。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ol><li>首先在前端页面中依赖Vivid.js的库文件<br> <code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vivid-icons&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></li><li>找到所需使用图标的名字，如’doc’</li><li><p>加载图标<br> <code>&lt;i data-vi=&quot;doc&quot;&gt;&lt;/i&gt;</code><br>就会在页面中渲染一个书页的图标了。</p></li><li><p>自定义图标样式<br>有时候原生的样式并不能满足我们的需求，如何进行一些样式的自定义呢？</p><p>4.1 自定义大小<br>自定义图标的大小，只需要在图标上增加属性：<code>data-vi-size=&quot;number&quot;</code>,number为要指定的像素大小值，如：<br><code>&lt;i data-vi=&quot;doc&quot; data-vi-size=&quot;96&quot;&gt;&lt;/i&gt;</code></p><p>4.2 自定义颜色<br>每个Vivid图标由三种颜色构成：primary，accent，prop。每一种颜色构成都可以单独自定义。<br>这就有点像画家可以通过自己调节红黄蓝三原色的组成形成新颜色似的。<br>组合的方式为：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data-vi-primary="#hexcode"</span><br><span class="line">data-vi-accent="#hexcode"</span><br><span class="line">data-vi-prop="#hexcode"</span><br></pre></td></tr></table></figure><p>在元素上修改相应属性即可。这里我试验过不一定非要16进制的颜色代码，跟我们写css时一样，颜色代码如”red”,”green”等也是可以的。<br>有点让人费解的就是，primary、accent、prop等控制的是图标的哪个部分，这个文档没有详细说明，primary和accent倒还是好”望文生义”，就是这个”prop”颜色成分是控制哪儿的不太能搞清，只能自己用的时候试下了。</p></li><li><p>默认样式的自定义<br>如果嫌每次重新定义图标的样式都要增加属性的方式比较麻烦，可以直接修改图标库文件。这个也是比较简单的。</p><p>5.1 安装必备环境<br> 5.1.1 安装node，不再赘述<br> 5.1.2 安装npm-run-all<br>   <code>npm i npm-run-all --save-dev</code><br>   一定要安装该库，官方文档里没有提到，不安装运行<code>npm run build</code>时必报错：”sh: run-s: command not found”<br> 5.1.3 安装webpack-cli<br>   <code>npm i webpack-cli -g</code><br>   全局安装webpack-cli，编译的时候需要用到，否则会报：”It needs to be installed alongside webpack to use the CLI”<br>5.2 下载图标库源码<br> <code>npm install vivid-icons</code><br> 安装前需要保证当前目录下存在package.json文件，所以先运行：<br> <code>npm init</code><br> 一路回车即可<br>5.2 进入图标库目录并安装依赖<br> <code>cd node_modules/vivid-icons &amp;&amp; npm install</code><br>5.3 修改配置<br> <code>cd src &amp;&amp; vi config.js</code><br> 配置文件的内容：</p> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export let iconConfig = &#123; </span><br><span class="line"><span class="symbol">    size:</span> <span class="string">"48"</span>, </span><br><span class="line"><span class="symbol">    primaryColor:</span> <span class="string">"#FF6E6E"</span>, </span><br><span class="line"><span class="symbol">    accentColor:</span> <span class="string">"#0C0058"</span>, </span><br><span class="line"><span class="symbol">    propColor:</span> <span class="string">"#FFFFFF"</span> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 修改对应的属性值<br>5.4 编译<br> <code>npm run build</code><br>5.5 使用编译的源码库<br> 编译完成后项目会生成新的图标库资源，路径在”dist/vivid-icons.min.js”</p></li><li><p>增加图标<br>有时候官方的图标不够用，自己想要增加图标该如何做呢？<br>继续上述第五步的操作，可以任意增删改icons目录下的图标文件，需要注意的是SVG图标文件的每个SVG元素都必须包含”vi-primary”,”vi-accent”类，以至于才可以在”src/config.js”里自定义颜色。<br>如增加一个”chat”图标:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">"chat"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"48"</span> <span class="attr">height</span>=<span class="string">"48"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 48 48"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.vi-primary</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">fill</span>: <span class="selector-id">#ffb400</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.vi-accent</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">fill</span>: <span class="selector-id">#070c2b</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"vi-primary"</span> <span class="attr">d</span>=<span class="string">"M24,39.765A18.556,18.556,0,0,1,13.924,37.1L7,44V23.882l0.012,0.006C7.011,23.791,7,23.7,7,23.6,7,14.369,13.247,8,24,8s17,6.652,17,15.882S34.753,39.765,24,39.765Z"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"vi-accent"</span> <span class="attr">d</span>=<span class="string">"M31.994,20.99a3,3,0,1,1-3,3A3,3,0,0,1,31.994,20.99ZM24,21a3,3,0,1,1-3,3A3,3,0,0,1,24,21Zm-8,0a3,3,0,1,1-3,3A3,3,0,0,1,16,21Z"</span>/&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行：<code>npm run build</code>，引入”dist/vivid-icons.min.js”文件后就可以使用新加的图标了。</p></li></ol>]]></content:encoded>
      
      <comments>http://zhangjh.me/2018/07/01/js-lib-share3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>分享我收藏的小而美JS库[二] -- KeyPress</title>
      <link>http://zhangjh.me/2018/06/18/js-lib-share2/</link>
      <guid>http://zhangjh.me/2018/06/18/js-lib-share2/</guid>
      <pubDate>Mon, 18 Jun 2018 13:11:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;i class=&quot;iconfont&quot; style=&quot;color: #1296db&quot;&gt;&amp;#xe65d;&lt;/i&gt;  17/53，每周一篇博，坚持！&lt;/p&gt;
&lt;p&gt;这一篇博文是小而美的库分享第二篇，准备分享一个JS键盘事件捕获的库，名字就叫做&lt;a href=&quot;http://dmauro.github.io/Keypress/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;KeyPress&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;关于KeyPress&quot;&gt;&lt;a href=&quot;#关于KeyPress&quot; class=&quot;headerlink&quot; title=&quot;关于KeyPress&quot;&gt;&lt;/a&gt;关于KeyPress&lt;/h4&gt;&lt;p&gt;我们在web开发过程中，为了给用户带来良好的用户体验，通常就不仅仅需要响应用户的鼠标操作，更多的是需要响应用户的键盘操作。通常这时候我们总是需要各种搜索查询键盘上各个按键对应的键码。&lt;br&gt;这是一个很繁琐而又没什么技术含量的事。而”KeyPress”这个库基本上就让我们摆脱了查询键码的繁琐过程，托管了我们对键盘映射的响应。&lt;br&gt;“非常容易使用，大小合理(9kb)，没有任何依赖，健壮性良好的键盘输入捕获JS库”，这是KeyPress的自我评价。&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><i class="iconfont" style="color: #1296db">&#xe65d;</i>  17/53，每周一篇博，坚持！</p><p>这一篇博文是小而美的库分享第二篇，准备分享一个JS键盘事件捕获的库，名字就叫做<a href="http://dmauro.github.io/Keypress/" target="_blank" rel="noopener">KeyPress</a>。</p><h4 id="关于KeyPress"><a href="#关于KeyPress" class="headerlink" title="关于KeyPress"></a>关于KeyPress</h4><p>我们在web开发过程中，为了给用户带来良好的用户体验，通常就不仅仅需要响应用户的鼠标操作，更多的是需要响应用户的键盘操作。通常这时候我们总是需要各种搜索查询键盘上各个按键对应的键码。<br>这是一个很繁琐而又没什么技术含量的事。而”KeyPress”这个库基本上就让我们摆脱了查询键码的繁琐过程，托管了我们对键盘映射的响应。<br>“非常容易使用，大小合理(9kb)，没有任何依赖，健壮性良好的键盘输入捕获JS库”，这是KeyPress的自我评价。<br><a id="more"></a></p><p>它能提供的功能特性包括：</p><ol><li>触发按键按下或释放</li><li>任意的按键都可以作为触发按键</li><li>特别地连击计算</li><li>按键序列的组合</li><li>其他的一些特性</li></ol><p>什么意思？我们上例子看下</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ol><li>首先需要下载它的库文件：<a href="https://github.com/dmauro/Keypress/zipball/master" target="_blank" rel="noopener">ZIP</a></li><li>在前端页面中引用该JS库文件</li><li><p>初始化一个事件监听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listener = <span class="keyword">new</span> <span class="built_in">window</span>.keypress.Listener();</span><br></pre></td></tr></table></figure></li><li><p>接下来就可以注册相应按键的事件监听了，我们看几个例子，妙就妙在这里<br>4.1 简单按键组合</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listener.simple_combo(<span class="string">"shift s"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"You pressed shift and s"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> simple_combo是库函数的API，第一个参数表示监听的是shift键和s键的按下，你可以写一系列的键，以空格分隔，这样是不是就脱离了查询键码组合了，直接识别键名称！<br> 第二个参数是回调函数，就不多解释了。</p><p>4.2 计数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listener.counting_combo(<span class="string">"tab space"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e,count</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"You've pressed this "</span> + count + <span class="string">"times."</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 这段代码调用counting_combo API创建了一个计数器，可以统计tab space键按下的总次数。</p><p>4.3 按键序列<br>大家都玩过魂斗罗吧？我们都知道魂斗罗里面有个按键组合，如果正确按下了就会触发30条命。这种功能就可以使用按键序列事件来监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listener.sequence_combo(<span class="string">"up up down down left right left right b a enter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  lives = <span class="number">30</span>;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>如上的一些已经完全够我们在web开发过程中自由发挥了，毕竟我们在开发过程中大部分都是用来监听用户的按键组合。</p><p>KeyPress还有一些高级用法，这里仅举几个例子说明用法，虽然实际中可能不会存在这样的场景：<br>register_combo：使用该API注册一系列事件动作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listener.register_combo(&#123;</span><br><span class="line">   <span class="comment">// 按键组合，空格分隔或者字符数组</span></span><br><span class="line">   <span class="string">"keys"</span>              : <span class="literal">null</span>,</span><br><span class="line">   <span class="comment">// 按键按下时的回调函数（都针对keys设置的按键组合）</span></span><br><span class="line">   <span class="string">"on_keydown"</span>        : <span class="literal">null</span>,</span><br><span class="line">   <span class="comment">// 按键释放时的回调函数</span></span><br><span class="line">   <span class="string">"on_keyup"</span>          : <span class="literal">null</span>,</span><br><span class="line">   <span class="comment">// 等价于回调函数设置event.preventDefault()，而且如果是组合按键的话，针对每个按键都event.preventDefault()了</span></span><br><span class="line">   <span class="string">"prevent_default"</span>   : <span class="literal">false</span>,</span><br><span class="line">   ... ...</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>这个库最方便的地方便在于不用记忆键码也可以写事件监听，并且支持任意的按键组合，让我们可以专心写事件回调逻辑，按键事件监听的事都交给库来解决。这会很大程度上提高我们编码的效率。</p><p>更详细的用法大家可以查看官方文档。</p></li></ol>]]></content:encoded>
      
      <comments>http://zhangjh.me/2018/06/18/js-lib-share2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【翻译】GitHub的光明未来</title>
      <link>http://zhangjh.me/2018/06/05/translate_github_acquire/</link>
      <guid>http://zhangjh.me/2018/06/05/translate_github_acquire/</guid>
      <pubDate>Tue, 05 Jun 2018 14:57:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;i class=&quot;iconfont&quot; style=&quot;color: #1296db&quot;&gt;&amp;#xe65d;&lt;/i&gt; 16/53，每周一篇博，坚持！&lt;/p&gt;
&lt;p&gt;(翻译自&lt;a href=&quot;https://blog.github.com/2018-06-04-github-microsoft/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github blog&lt;/a&gt;)&lt;br&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/mw690/62d95157gy1fs0pfox35cj21ut0z5q58.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我很高兴地宣布，微软正在谋求收购Github并且有望在今年年底完成收购协议。虽然最终达成收购还需要几个月的时间，但我们想尽快分享这个消息给大家。&lt;/p&gt;
&lt;p&gt;当十年前刚建立Github的时候，我从未想到过这个“标题”。Git是一个强大且优秀的工具（原文niche疑为nice笔误），“云”只是天上的东西，而微软则是一个非常不同的公司。人们谈论到开源和商业的时候，仿佛它们是水火不容的两件事。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><i class="iconfont" style="color: #1296db">&#xe65d;</i> 16/53，每周一篇博，坚持！</p><p>(翻译自<a href="https://blog.github.com/2018-06-04-github-microsoft/" target="_blank" rel="noopener">Github blog</a>)<br><img src="http://wx2.sinaimg.cn/mw690/62d95157gy1fs0pfox35cj21ut0z5q58.jpg" alt=""></p><p>我很高兴地宣布，微软正在谋求收购Github并且有望在今年年底完成收购协议。虽然最终达成收购还需要几个月的时间，但我们想尽快分享这个消息给大家。</p><p>当十年前刚建立Github的时候，我从未想到过这个“标题”。Git是一个强大且优秀的工具（原文niche疑为nice笔误），“云”只是天上的东西，而微软则是一个非常不同的公司。人们谈论到开源和商业的时候，仿佛它们是水火不容的两件事。</p><a id="more"></a><p>然而我们不同意。作为开发者，我们知道这是一个错误的对立—-我们长期以来一直在商业环境中成功地使用开源软件。我们真正需要的是一个更简单的同其他人协同工作的方式，无论代码是公开的、私有的还是二者兼有。我们希望使用Git达成这一所愿，我们希望世界上的任何人都能够加入进来，如果代码是开源的，我们不希望花费一分钱。所以我们创建了Github。</p><p>当然现在情况已经完全不同了。Git已经是最流行的版本控制系统，“云”也变成了非常非常多的电脑的意思，而微软也成为了当今Github上最为活跃的组织。仅仅他们的VS Code项目就获得了上百万开发者的点赞，VS Code完完全全地开放源码并且使用Github的Electron平台进行构建。除此之外，现如今大型企业也都习惯了拥抱开源。世界已经意识到快乐并高产的开发人员有多么重要。并且人们现在也都拥有智能手机了。</p><p>然而没变的是，我们的聚焦点依然在开发者身上。一开始，我们一直着迷于打造一款人们正在使用的产品。我们希望让开发者们更加多产，更多的人成为开发者。从“Code to Cloud,Code to Edge”，Github的使命是帮助每一个开发者—-无论他们的经验水平如何—-有效地学习，编写并提供软件。</p><p>因此当我们期待未来十年的软件开发的时候，我们知道那些都会是关于开发者的。正如我们在过去几年中，通过从Git LFS到Electron项目合作中了解到的微软团队，我们了解到他们也是这么看的。他们在开源领域的工作激励了我们，Minecraft（我的世界）和LinkedIn（领英）收购后的成功也向我们表明他们对拓展新业务的是非常认真的，同时Azure的发展也证明他们是一个创新的开发平台。</p><p>但不止如此，他们关于未来的认知和我们的观点高度契合。我们都认为Github仍会是一个对所有开发者保持开放的平台。无论您的语种、技术栈、平台、云或者许可证如何，Github将会继续是你的家—-那个软件创建、协作、发现的最佳场所。</p><p>我们都认为软件开发需要更简单、更加无障碍、更加智能、更加开放，以使更多的人可以成为开发者，已经是开发者的可以花费更多的时间在他们正试图解决的独特的问题上。</p><p>我们都看到了开发人员日益增长的需求以及软件在我们生活的各个方面日益增长的重要性。</p><p>更为重要的是，我们都认为我们一起可以比双方独自时做到更好。毕竟，合作正是我们所做事情的核心。</p><p>作为变化的一部分，Nat Friedman将成为Github的CEO。我们一直在寻找一位新的CEO，现在在微软和Nat中找到了我们认为将在未来几年加强和发展Github社区和公司的合作伙伴。Nat 拥有相当丰富的软件经验和开源软件社区的经验，曾共同创建了Xamarin，并且在大量的开源软件项目工作过数年。他将是一个帮助Github成长且继续让开发者的生活变得更美好的完美人选。</p><p>至于我，我将在与微软和Nat的团队紧密合作中担任一个新的角色，未来会跟大家分享更多的细节。</p><p>我对Github和我们的社区在过去十年中所取得的成就感到非常自豪，我迫不及待地想看到未来会发生什么。软件开发的未来是光明的，我很高兴能够与微软一起联手实现这一目标。</p><p><a href="https://github.com/defunkt" target="_blank" rel="noopener">@defunkt</a><br>CEO &amp; Co-Founder, GitHub</p>]]></content:encoded>
      
      <comments>http://zhangjh.me/2018/06/05/translate_github_acquire/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mysql中in与find_in_set的使用</title>
      <link>http://zhangjh.me/2018/06/03/mysql-in-find_in_set/</link>
      <guid>http://zhangjh.me/2018/06/03/mysql-in-find_in_set/</guid>
      <pubDate>Sun, 03 Jun 2018 15:42:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;i class=&quot;iconfont&quot; style=&quot;color: #1296db&quot;&gt;&amp;#xe65d;&lt;/i&gt; 15/53，每周一篇博，坚持！&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;p&gt;写在前面&lt;/p&gt;
&lt;p&gt; 最近在工作中误用了mysql的in查询，导致了一个线上问题，花了我一个下午的时间排查加修复。mysql算是我的一个薄弱项了，主要是没有系统性的训练过。一些没用过的查询方式使用的时候借助搜索引擎，中文技术领域里一些技术分享还是比较坑的，语焉不详的算是一部分，误人子弟的也不乏其人。&lt;/p&gt;
&lt;p&gt; 这篇博文就主要整理一下我所梳理的mysql中in的用法及和find_in_set用法的差异所在。也许网上已经有很多的文章介绍了，但不乏一些介绍不够清晰的，我这里的博文都是经过实践验证的，不敢保证一定做到简洁明了人人能懂，但绝不做误人子弟之事。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><i class="iconfont" style="color: #1296db">&#xe65d;</i> 15/53，每周一篇博，坚持！</p><ol start="0"><li><p>写在前面</p><p> 最近在工作中误用了mysql的in查询，导致了一个线上问题，花了我一个下午的时间排查加修复。mysql算是我的一个薄弱项了，主要是没有系统性的训练过。一些没用过的查询方式使用的时候借助搜索引擎，中文技术领域里一些技术分享还是比较坑的，语焉不详的算是一部分，误人子弟的也不乏其人。</p><p> 这篇博文就主要整理一下我所梳理的mysql中in的用法及和find_in_set用法的差异所在。也许网上已经有很多的文章介绍了，但不乏一些介绍不够清晰的，我这里的博文都是经过实践验证的，不敢保证一定做到简洁明了人人能懂，但绝不做误人子弟之事。</p> <a id="more"></a></li><li><p>in和find_in_set简介</p><p> 这两个命令从字面 意思上来看，貌似都是用来查询某个字段是否在某个值范围内的意思。但实际上两者的使用场景上是有区别的，我那个线上问题就是在应该使用find_in_set的时候误用了in。</p><ul><li><p>in<br>  首先in做的是值与值间的精确匹配，它的用法如下：</p><p>  <code>column in (value1,value2,value3...)</code>    </p><p>  “…”表示后面可以继续跟参数，也就是说in操作可以有任意的参数，每个参数间用逗号分隔。<br>  语句将<strong>依次</strong>查询字段的值是否与参数给出的值匹配。如果匹配则表示查询成功。<br>  <strong>这里值得注意的是</strong>: 很多网上的文章说的是in比较的是等不等，也就是说column要和后面values组成的逗号序列值相等。这是不对的，实际上是要拿column的值依次和values组成的逗号序列值做匹配，如果value1和column值相等则算匹配成功，否则都算失败。</p></li><li><p>find_in_set<br>  而find_in_set是从一个以逗号分隔的字符串列表中查找某个指定的字符串，它的用法如下：</p><p>  <code>find_in_set(str,&quot;value1,value2,value3...&quot;)</code></p><p>  可以看出find_in_set操作只可以接受两个参数，只是第二个参数可以是一个任意长度的以逗号分隔的字符串列表。<br>  如果在第二个参数这个字符串列表中找到第一个参数时则匹配成功。</p><p>不知道说清楚没有，再举个例子说明一下。</p><p>如数据库表存储的是图书信息，图书信息都分门别类按照书目所属的类别存储，一本图书只属于一个类别。此时我们希望查询出计算机和通信工程两个分类的书籍信息，就可以使用in来查询。<br>因为这明显是要将书目类别信息与给定的参数值做匹配的需求。</p><p>然而如果另一个数据库表存储的是某个学生近期借阅的书籍信息，每个学生一条数据，其中借阅书籍字段存储了他近期所借阅的所有书籍的书号。此时我们希望查询出该学生近期是否借阅过某本书，这时就可以使用find_in_set来查询。因为数据库里借阅书籍字段存储的是一串以逗号分隔的书号，这明显是要在一串字符串分隔的数据中查找指定的字符的需求。</p><p>从这两个小例子中可以看出，我们可以简单地以数据库存储的字段是否是逗号分隔的字符串列表来划分是否要使用find_in_set。</p></li></ul></li><li><p>示例</p><p> 以我实际遇到的问题为例，我要处理的表数据存储的字段为readedPartnerIds：以逗号形式存储了服务商的id。<br> 我的需求是：数据库里每一条记录代表了一条发给服务商的消息，如果某个服务商阅读过这条消息后，将该服务商的id追加到已读服务商id字段中，如果该服务商未读，则弹出消息。</p><p> 开始我错误地使用了in操作：</p><p> <code>select * from table where #partnerId# in (readedPartnerIds);</code></p><p> 这导致查询不到结果，该显示的消息弹框未显示出来。(有一条例外，即恰好partnerId值为readedPartnerIds字段的第一个值)<br> 正确的写法应该使用 find_in_set操作：</p><p> <code>select * from table where find_in_set(#partnerId#,readedPartnerIds)</code></p><p> 这样就能正确的从数据库存储的服务商id列表中查出是否包含了该服务商id。</p></li></ol>]]></content:encoded>
      
      <comments>http://zhangjh.me/2018/06/03/mysql-in-find_in_set/#disqus_thread</comments>
    </item>
    
    <item>
      <title>分享我收藏的小而美JS库[一] -- notie</title>
      <link>http://zhangjh.me/2018/05/27/js-lib-share/</link>
      <guid>http://zhangjh.me/2018/05/27/js-lib-share/</guid>
      <pubDate>Sun, 27 May 2018 12:11:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;i class=&quot;iconfont&quot; style=&quot;color: #1296db&quot;&gt;&amp;#xe65d;&lt;/i&gt;  14/53，每周一篇博，坚持！&lt;/p&gt;
&lt;p&gt;每周一篇博文的目标还是比较艰巨的，有时候时间比较紧张的时候根本来不及想主题。。&lt;img class=&quot;emoji&quot; src=&quot;https://emojipedia-us.s3.amazonaws.com/thumbs/320/apple/129/face-with-tears-of-joy_1f602.png&quot; align=&quot;absmiddle&quot;&gt;&lt;/p&gt;
&lt;p&gt;准备开一个系列，介绍下我收藏的那些小而美的JS开源库。这是第一篇，关于一个设计良好的美观实用PC、移动兼容良好的弹框库–&lt;a href=&quot;https://github.com/jaredreich/notie&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;notie&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;关于notie&quot;&gt;&lt;a href=&quot;#关于notie&quot; class=&quot;headerlink&quot; title=&quot;关于notie&quot;&gt;&lt;/a&gt;关于notie&lt;/h4&gt;&lt;p&gt;众所周知，浏览器默认的弹框–alert是异常丑陋的，我们在业务中通常是不会直接使用alert来显示应用弹框消息的，一般都会重新设计应用自己的弹框来替代之。&lt;br&gt;notie就是一款用来替代alert的消息弹框库。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><i class="iconfont" style="color: #1296db">&#xe65d;</i>  14/53，每周一篇博，坚持！</p><p>每周一篇博文的目标还是比较艰巨的，有时候时间比较紧张的时候根本来不及想主题。。<img class="emoji" src="https://emojipedia-us.s3.amazonaws.com/thumbs/320/apple/129/face-with-tears-of-joy_1f602.png" align="absmiddle"></p><p>准备开一个系列，介绍下我收藏的那些小而美的JS开源库。这是第一篇，关于一个设计良好的美观实用PC、移动兼容良好的弹框库–<a href="https://github.com/jaredreich/notie" target="_blank" rel="noopener">notie</a>。</p><h4 id="关于notie"><a href="#关于notie" class="headerlink" title="关于notie"></a>关于notie</h4><p>众所周知，浏览器默认的弹框–alert是异常丑陋的，我们在业务中通常是不会直接使用alert来显示应用弹框消息的，一般都会重新设计应用自己的弹框来替代之。<br>notie就是一款用来替代alert的消息弹框库。</p><a id="more"></a><p>它的几项主要功能：</p><ol><li>alert的功能：提醒用户</li><li>弹出选项让用户确认</li><li>允许用户输入信息</li><li>允许用户选择选项</li><li>允许用户选择日期</li></ol><p>放一张官网的demo图看一下notie的效果，还是非常优雅的：<br> <img src="https://github.com/jaredreich/notie/blob/master/demo.gif?raw=true" alt=""></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>既然是小而美的库，使用起来也是相当方便的：</p><ol><li><p>安装<br> 在HTML内加载notie文件，并加载notie的样式文件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/notie/dist/notie.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="comment">/* override styles here */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.notie-container</span> &#123;</span></span><br><span class="line"><span class="undefined">      box-shadow: none;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!-- Bottom of body --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/notie"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>业务调用<br> 在业务js中调用notie API：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">notie.alert(&#123;</span><br><span class="line">  type: <span class="built_in">Number</span>|<span class="built_in">String</span>, <span class="comment">// optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']</span></span><br><span class="line">  text: <span class="built_in">String</span>,</span><br><span class="line">  stay: <span class="built_in">Boolean</span>, <span class="comment">// optional, default = false</span></span><br><span class="line">  time: <span class="built_in">Number</span>, <span class="comment">// optional, default = 3, minimum = 1,</span></span><br><span class="line">  position: <span class="built_in">String</span> <span class="comment">// optional, default = 'top', enum: ['top', 'bottom']</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">notie.force(&#123;</span><br><span class="line">  type: <span class="built_in">Number</span>|<span class="built_in">String</span>, <span class="comment">// optional, default = 5, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']</span></span><br><span class="line">  text: <span class="built_in">String</span>,</span><br><span class="line">  buttonText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'OK'</span></span><br><span class="line">  position: <span class="built_in">String</span>, <span class="comment">// optional, default = 'top', enum: ['top', 'bottom']</span></span><br><span class="line">  callback: <span class="built_in">Function</span> <span class="comment">// optional</span></span><br><span class="line">&#125;, callbackOptional())</span><br><span class="line"></span><br><span class="line">notie.confirm(&#123;</span><br><span class="line">  text: <span class="built_in">String</span>,</span><br><span class="line">  submitText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'Yes'</span></span><br><span class="line">  cancelText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'Cancel'</span></span><br><span class="line">  position: <span class="built_in">String</span>, <span class="comment">// optional, default = 'top', enum: ['top', 'bottom']</span></span><br><span class="line">  submitCallback: <span class="built_in">Function</span>, <span class="comment">// optional</span></span><br><span class="line">  cancelCallback: <span class="built_in">Function</span> <span class="comment">// optional</span></span><br><span class="line">&#125;, submitCallbackOptional(), cancelCallbackOptional())</span><br><span class="line"></span><br><span class="line">notie.input(&#123;</span><br><span class="line">  text: <span class="built_in">String</span>,</span><br><span class="line">  submitText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'Submit'</span></span><br><span class="line">  cancelText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'Cancel'</span></span><br><span class="line">  position: <span class="built_in">String</span>, <span class="comment">// optional, default = 'top', enum: ['top', 'bottom']</span></span><br><span class="line">  submitCallback: <span class="built_in">Function</span>(value), <span class="comment">// optional</span></span><br><span class="line">  cancelCallback: <span class="built_in">Function</span>(value), <span class="comment">// optional</span></span><br><span class="line">  autocapitalize: <span class="string">'words'</span>, <span class="comment">// default: 'none'</span></span><br><span class="line">  autocomplete: <span class="string">'on'</span>, <span class="comment">// default: 'off'</span></span><br><span class="line">  autocorrect: <span class="string">'off'</span>, <span class="comment">// default: 'off'</span></span><br><span class="line">  autofocus: <span class="string">'true'</span>, <span class="comment">// default: 'true'</span></span><br><span class="line">  inputmode: <span class="string">'latin'</span>, <span class="comment">// default: 'verbatim'</span></span><br><span class="line">  max: <span class="string">'10000'</span>,<span class="comment">// default: ''</span></span><br><span class="line">  maxlength: <span class="string">'10'</span>, <span class="comment">// default: ''</span></span><br><span class="line">  min: <span class="string">'5'</span>, <span class="comment">// default: ''</span></span><br><span class="line">  minlength: <span class="string">'1'</span>, <span class="comment">// default: ''</span></span><br><span class="line">  placeholder: <span class="string">'Jane Smith'</span>, <span class="comment">// default: ''</span></span><br><span class="line">  spellcheck: <span class="string">'false'</span>, <span class="comment">// default: 'default'</span></span><br><span class="line">  step: <span class="string">'5'</span>, <span class="comment">// default: 'any'</span></span><br><span class="line">  type: <span class="string">'text'</span>, <span class="comment">// default: 'text'</span></span><br><span class="line">  allowed: [<span class="string">'an'</span>, <span class="string">'s'</span>] <span class="comment">// Default: null, 'an' = alphanumeric, 'a' = alpha, 'n' = numeric, 's' = spaces allowed. Can be custom RegExp, ex. allowed: new RegExp('[^0-9]', 'g')</span></span><br><span class="line">&#125;, submitCallbackOptional(value), cancelCallbackOptional(value))</span><br><span class="line"></span><br><span class="line">notie.select(&#123;</span><br><span class="line">  text: <span class="built_in">String</span>,</span><br><span class="line">  cancelText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'Cancel'</span></span><br><span class="line">  position: <span class="built_in">String</span>, <span class="comment">// optional, default = 'bottom', enum: ['top', 'bottom']</span></span><br><span class="line">  choices: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>|<span class="built_in">String</span>, <span class="comment">// optional, default = 1</span></span><br><span class="line">      text: <span class="built_in">String</span>,</span><br><span class="line">      handler: <span class="built_in">Function</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  cancelCallback: <span class="built_in">Function</span> <span class="comment">// optional</span></span><br><span class="line">&#125;, cancelCallbackOptional())</span><br><span class="line"></span><br><span class="line">notie.date(&#123;</span><br><span class="line">  value: <span class="built_in">Date</span>,</span><br><span class="line">  submitText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'OK'</span></span><br><span class="line">  cancelText: <span class="built_in">String</span>, <span class="comment">// optional, default = 'Cancel'</span></span><br><span class="line">  position: <span class="built_in">String</span>, <span class="comment">// optional, default = 'top', enum: ['top', 'bottom']</span></span><br><span class="line">  submitCallback: <span class="built_in">Function</span>(date), <span class="comment">// optional</span></span><br><span class="line">  cancelCallback: <span class="built_in">Function</span>(date) <span class="comment">// optional</span></span><br><span class="line">&#125;, submitCallbackOptional(date), cancelCallbackOptional(date))</span><br></pre></td></tr></table></figure><p> 最常用的还是alert了。<br> 如果我们想弹出一个成功的提示消息给用户只需简单调用如下：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notie.alert(&#123;</span><br><span class="line">    type: <span class="number">1</span>,</span><br><span class="line">    text: <span class="string">"Success"</span>,</span><br><span class="line">    stay: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 使用的时候可以多多尝试，看看哪个效果是自己需要的。</p></li><li><p>在React等前端框架下使用<br> 在如今前端工程化的背景下，notie同样也支持在如React等前端框架下使用。<br> 首先要使用npm安装notie：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install notie</span><br></pre></td></tr></table></figure><p> 然后引入notie并加载需要使用的notie组件:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载全部</span></span><br><span class="line"><span class="keyword">import</span> notie <span class="keyword">from</span> <span class="string">'notie'</span>;</span><br><span class="line"><span class="comment">// 加载部分</span></span><br><span class="line"><span class="keyword">import</span> &#123;alert, force, confirm, input, selecct, date, setOptions, hideAlerts&#125; <span class="keyword">from</span> <span class="string">'notie'</span>;</span><br></pre></td></tr></table></figure><p> 调用API的方式和浏览器使用方式一致。</p></li></ol>]]></content:encoded>
      
      <comments>http://zhangjh.me/2018/05/27/js-lib-share/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
